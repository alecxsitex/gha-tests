name: Deploy PROD
on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      service_name:
        required: true
        default: 'all'

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  CONFIG: |
    {
      "backoffice" : {
        "domain" : "backoffice.tld",
        "s3_bucket": "backoffice_bucket",
        "api_url": "",
        "env" : {
          "BACKOFFICE_ENV_FOO": "FOO",
          "BACKOFFICE_ENV_BAR": "BAR"
        }
      },
      "business" : {
        "domain" : "business.tld",
        "s3_bucket": "business_bucket",
        "api_url": "business.api.tld",
        "env" : {
          "BUSINESS_ENV_FOO": "FOO",
          "BUSINESS_ENV_BAR": "BAR"
        }
      },
      "checkout" : {
        "domain" : "checkout.tld",
        "s3_bucket": "checkout_bucket",
        "api_url": "checkout.api.tld",
        "env" : {
          "CHECKOUT_ENV_FOO": "FOO",
          "CHECKOUT_ENV_BAR": "BAR"
        }
      },
      "tradingoffice": {
        "domain" : "tradingoffice.tld",
        "s3_bucket": "tradingoffice_bucket",
        "api_url": "tradingoffice.api.tld",
        "env" : {
          "TRADINGOFFICE_ENV_FOO": "FOO",
          "TRADINGOFFICE_ENV_BAR": "BAR"
        }
      }
    }'

jobs:
  setup:
    runs-on: ["ubuntu-latest"]
    outputs:
      deploy_list: ${{ steps.calc_projects.outputs.deploy_list }}
    steps:
      - uses: actions/checkout@v4
        name: Code checkout
        id: checkout

      - name: deploy list
        id: calc_projects
        run: |
          set -o pipefail
          declare -a PROJECTS
          declare -a INPUT_LIST;
          declare -a DEPLOY_LIST;

          for project in $(echo ${CONFIG} | jq -r 'keys | .[]'); do
            PROJECTS+=( $project )
          done

          INPUT_LIST=($(echo "${{ github.event.inputs.service_name }}" | tr ',' '\n'))
          if [[ "${{ github.event.inputs.service_name }}" == "" ]]; then
            INPUT_LIST=${PROJECTS[@]}
            echo "deploy_list=$(echo ${PROJECTS[@]} | jq -R -c 'split(" ")')" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [[ "${{ github.event.inputs.service_name }}" == "all" ]]; then
            INPUT_LIST=${PROJECTS[@]}
            echo "deploy_list=$(echo ${PROJECTS[@]} | jq -R -c 'split(" ")')" >> $GITHUB_OUTPUT
            exit 0
          fi

          for project in ${INPUT_LIST[*]}; do
            if (echo ${PROJECTS[@]} | tr ' ' '\n' | grep -F -q -x "${project}") then
                DEPLOY_LIST+=( "${project}" )
                continue
            fi
            echo "[ERROR] Unsupported project \"$project\". See supported projects in \"CONFIG\" env."
            exit 1
            break
          done

          $(echo "deploy_list=$(cat ${DEPLOY_LIST[@]} | jq -R -c 'split(" ")')") >> $GITHUB_OUTPUT

      - name: results
        run: |
          echo "Deploy list = ${{ steps.calc_projects.outputs.deploy_list }}"

  deploy:
    runs-on: ["ubuntu-latest"]
    needs: ["setup"]
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.deploy_list) }}

    steps:
      - uses: actions/checkout@v4
        name: Code checkout
        id: checkout

      - run:
          set -o pipefail
          echo PROJECT is ${{ matrix.project }}
          echo RESULT is $(echo ${CONFIG} | jq --arg project ${{ matrix.project }} '.[$project]')
